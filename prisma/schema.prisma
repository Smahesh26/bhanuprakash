generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- LMS MODELS ----------------
model LatestVideo {
  id         String   @id @default(cuid())
  title      String
  tag        String
  review     String
  price      Float
  lesson     Int
  student    Int
  page       String   @default("home_7")
  thumb      String
  youtubeUrl String?   // <-- Add this line
  createdAt  DateTime @default(now())
}

model Subject {
  id       String           @id @default(cuid())
  name     String           @unique
  chapters SubjectChapter[]
}

model SubjectChapter {
  id        String  @id @default(cuid())
  title     String
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  topics    Topic[]

  @@unique([subjectId, title])
}

model Topic {
  id           String         @id @default(cuid())
  title        String
  chapterId    String
  youtubeUrl   String?
  pdfUrl       String?
  mcqUrl       String?
  caseStudyUrl String?
  pdfAccess    PdfAccessType? // enum below
  subtopics    Subtopic[]
  mcqs         MCQ[] // MCQs directly under Topic
  chapter      SubjectChapter @relation(fields: [chapterId], references: [id])

  @@unique([chapterId, title])
}

model Subtopic {
  id           String        @id @default(cuid())
  title        String
  topicId      String
  youtubeUrl   String
  pdfUrl       String?
  mcqUrl       String?
  caseStudyUrl String?
  pdfAccess    PdfAccessType @default(VIEW)
  topic        Topic         @relation(fields: [topicId], references: [id])
  mcqs         MCQ[] // MCQs under subtopic
}

// âœ… MCQ Model
model MCQ {
  id           String  @id @default(cuid())
  question     String
  options      Json // Example: ["Option A", "Option B", "Option C", "Option D"]
  correctIndex Int // Index 0-3
  topicId      String?
  subtopicId   String?

  topic    Topic?    @relation(fields: [topicId], references: [id])
  subtopic Subtopic? @relation(fields: [subtopicId], references: [id])
}

// ---------------- VIDEO LIBRARY ----------------

model CourseVideo {
  id         String          @id @default(cuid())
  title      String
  videoId    String
  playlistId String
  overview   String?
  pdfUrl     String?
  access     PdfAccessType   @default(VIEW)
  createdAt  DateTime        @default(now())
  chapters   LegacyChapter[]
}

model LegacyChapter {
  id            String      @id @default(cuid())
  title         String
  timeStamp     String
  courseVideoId String
  courseVideo   CourseVideo @relation(fields: [courseVideoId], references: [id])
}

// ---------------- AUTH MODELS ----------------

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  fname         String?
  lname         String?
  phone         String?
  country       String?
  state         String?
  city          String?
  university    String?
  password      String?
  createdAt     DateTime     @default(now())
  isVerified    Boolean      @default(false)
  isNewUser     Boolean      @default(true)
  accounts      Account[]
  paidAccesses  PaidAccess[]
  resetTokens   ResetToken[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model ResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaidAccess {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// ---------------- ENUMS ----------------

enum PdfAccessType {
  VIEW
  DOWNLOAD
  PAID
}
model Admin {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  userName    String   @unique
  phoneNumber String?
  skill       String?
  displayName String?
  bio         String?
  avatar      String?
  email       String   @unique
  password    String
  facebook    String?
  twitter     String?
  linkedin    String?
  website     String?
  github      String?
}
model Curriculum {
  id        String    @id @default(cuid())
  subject   String
  chapters  Json      // Store chapters/topics as JSON for simplicity
  createdAt DateTime  @default(now())
}